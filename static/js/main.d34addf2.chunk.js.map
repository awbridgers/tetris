{"version":3,"sources":["containers/canvas.js","App.js","actions/index.js","serviceWorker.js","reducers/board.js","shapes.js","reducers/index.js","reducers/currentTetro.js","reducers/score.js","reducers/gameStatus.js","reducers/gameStarted.js","reducers/gameOver.js","store.js","index.js"],"names":["Canvas","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","colorSquares","props","currentTetro","ctx","canvas","getContext","lineWidth","clearRect","beginPath","fillStyle","i","j","rect","fill","closePath","_this2","react_default","a","createElement","className","width","height","ref","Component","connect","state","board","gameStarted","gameOver","App","updateScore","rowsCleared","scoreAdder","score","addTetroToBoard","tetro","tempBoard","slice","row","shape","length","col","topLeft","updateBoard","newTetro","landed","arrayIsEqual","array1","equal","equals","rotate","tempTetro","objectSpread","index","rotations","findIndex","item","newShape","checkMove","updateTetro","direction","checkArray","checkTopLeft","movePiece","placePiece","newTopLeft","moveTetro","allowMove","onKeyDown","e","preventDefault","gameOn","keyCode","startGame","newGame","changeGameStatus","gameDiv","focus","resetGame","newBoard","filter","includes","unshift","changeGameOver","tabIndex","dispatch","type","payload","status","started","Boolean","window","location","hostname","match","boardArray","tetroArray","name","rootReducer","combineReducers","arguments","undefined","Array","from","action","Math","floor","random","store","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d34addf2.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport { connect } from 'react-redux'\r\n\r\nclass Canvas extends Component{\r\n  constructor(){\r\n    super();\r\n    this.canvas = null;\r\n  }\r\n  componentDidUpdate(){\r\n    this.colorSquares();\r\n  }\r\n  componentDidMount(){\r\n    this.colorSquares();\r\n  }\r\n  colorSquares = () =>{\r\n    let tetronimo = this.props.currentTetro;\r\n    const ctx = this.canvas.getContext('2d');\r\n    //clear the canvas before redrawing\r\n    ctx.lineWidth = '0'\r\n    ctx.clearRect(0,0,350,560)\r\n    ctx.beginPath()\r\n    ctx.fillStyle = 'orange'\r\n    for(let i= 0; i< 16; i++){\r\n      for(let j = 0; j< 10; j++){\r\n        ctx.rect(i*36, j*36, 35,35)\r\n      }\r\n    }\r\n    ctx.fill()\r\n    ctx.closePath();\r\n        //if it is a 0, nothing in square, color grey\r\n        // if(this.props.board[x][y] === 0){\r\n        //   ctx.fillStyle = '#2E2E2E';\r\n        // }\r\n        // else if(this.props.board[x][y] === 1){\r\n        //   ctx.fillStyle = '#FFFF00';\r\n        // }\r\n        // else if (this.props.board[x][y] === 2){\r\n        //   ctx.fillStyle = '#00FFFF';\r\n        // }\r\n        // else if (this.props.board[x][y] === 3){\r\n        //   ctx.fillStyle = '#00FF00';\r\n        // }\r\n        // else if (this.props.board[x][y] === 4){\r\n        //   ctx.fillStyle = '#FF0000';\r\n        // }\r\n        // else if (this.props.board[x][y] === 5){\r\n        //   ctx.fillStyle = '#8000FF';\r\n        // }\r\n        // else if (this.props.board[x][y] === 6){\r\n        //   ctx.fillStyle = '#FF8000';\r\n        // }\r\n        // else if (this.props.board[x][y] === 7){\r\n        //   ctx.fillStyle = '#0000FF';\r\n        // }\r\n\r\n\r\n    //   }\r\n    // }\r\n    // now we need to color in the current tetris piece that is coming down the board\r\n    // if(this.props.gameStarted){\r\n    //   tetronimo.shape.forEach((row,i) =>{\r\n    //     row.forEach((square,j)=>{\r\n    //       ctx.beginPath();\r\n    //       ctx.rect((j + tetronimo.topLeft.col)*36, (i + tetronimo.topLeft.row) * 36, 35,35)\r\n    //       ctx.fillStyle = 'red';\r\n    //       if(row !==0 && square !==0){\r\n    //         //if its a tetris piece, color it in\r\n    //         if(square === 1){\r\n    //           ctx.fillStyle = '#FFFF00';\r\n    //         }\r\n    //         else if (square === 2){\r\n    //           ctx.fillStyle = '#00FFFF';\r\n    //         }\r\n    //         else if (square === 3){\r\n    //           ctx.fillStyle = '#00FF00';\r\n    //         }\r\n    //         else if (square === 4){\r\n    //           ctx.fillStyle = '#FF0000';\r\n    //         }\r\n    //         else if (square === 5){\r\n    //           ctx.fillStyle = '#8000FF';\r\n    //         }\r\n    //         else if (square === 6){\r\n    //           ctx.fillStyle = '#FF8000';\r\n    //         }\r\n    //         else if (square === 7){\r\n    //           ctx.fillStyle = '#0000FF';\r\n    //         }\r\n    //         ctx.fill();\r\n    //       }\r\n    //       ctx.closePath();\r\n    //     })\r\n    //   })\r\n    // }\r\n  }\r\n  render(){\r\n    return(\r\n      <div className = 'board'>\r\n        <canvas width = '360' height = \"576\" ref = {(ref)=> this.canvas = ref}></canvas>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = state =>({\r\n  board: state.board,\r\n  currentTetro: state.currentTetro,\r\n  gameStarted: state.gameStarted,\r\n  gameOver: state.gameOver\r\n})\r\nexport default connect(mapStateToProps) (Canvas)\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Canvas from './containers/canvas.js';\nimport equals from 'array-equal';\nimport { connect } from 'react-redux';\nimport { updateTetro, updateBoard, newTetro, updateScore, changeGameStatus } from './actions/index.js';\nimport { startGame, changeGameOver, resetGame } from './actions/index.js'\nimport Score from './components/score.js'\nimport GameStart from './components/gameStart.js'\n\nclass App extends Component {\n  componentDidMount(){\n    //focus on the game div so the keypress function will trigger\n    this.gameDiv.focus();\n  }\n  componentDidUpdate(){\n    if(this.landed){\n      //check for any rows to be cleared\n      //if a row doesn't have any 0,s its filled\n      let newBoard = this.props.board.filter(row => row.includes(0));\n      const rowsCleared = 16 - newBoard.length;\n      //add the number of removed rows to the top as 0s\n      for(let i = 0; i< rowsCleared; i++){\n        newBoard.unshift([0,0,0,0,0,0,0,0,0,0])\n      }\n\n      //update the board and score\n      this.updateScore(rowsCleared);\n      this.props.updateBoard(newBoard);\n\n      //if there was a collision, the game is over\n      if(!this.checkMove(this.props.currentTetro, 'spawn')){\n        //this.props.startGame(false);\n        this.props.changeGameStatus(false);\n        this.props.changeGameOver(true);\n        this.landed = false;\n      }\n      else{\n        this.landed = false;\n      }\n    }\n  }\n  updateScore = (rowsCleared) =>{\n    let scoreAdder = 0;\n    switch(rowsCleared){\n      case 1:\n        scoreAdder = 40;\n        break;\n      case 2:\n        scoreAdder = 100;\n        break;\n      case 3:\n        scoreAdder = 300;\n        break;\n      case 4:\n        scoreAdder = 1200;\n        break;\n      default:\n        scoreAdder = 0;\n        break;\n    }\n    this.props.updateScore(this.props.score + scoreAdder);\n  }\n  addTetroToBoard = (tetro) => {\n    //create a copy of the board\n    let tempBoard = this.props.board.slice(0);\n    //loop through the shape of the tetro and add it to the board\n    //with topLeft as offset so shape starts where it is on the board already\n    for(let row = 0; row < tetro.shape.length; row++){\n      for(let col = 0; col < tetro.shape[row].length; col++){\n        //don't add to the board if its a 0, it could overwrite an already colored square\n        if(tetro.shape[row][col]!==0){\n          tempBoard[row + tetro.topLeft.row][col+ tetro.topLeft.col] = tetro.shape[row][col];\n        }\n      }\n    }\n    //update the board in the store\n    this.props.updateBoard(tempBoard);\n    this.props.newTetro();\n    //set landed to true to check if a collision occurs when the tetro spawns\n    this.landed = true;\n\n  }\n  arrayIsEqual = (array1,shape) => {\n    let equal = true;\n    //if the lenghts are equal, we need to see if they are the same\n    if(array1.length === shape.length){\n      //if the lengths are the same, loop through and evaluate each element\n      for(let i = 0; i< array1.length; i++){\n        //if the elements are different, set equal to false\n        if(!equals(array1[i], shape[i])){\n          equal = false;\n        }\n      }\n    }\n    //if the lengths aren't equal, the arrays aren't equal\n    else{\n      equal = false;\n    }\n    return equal;\n  }\n  rotate = () => {\n    let tempTetro = {...this.props.currentTetro};\n    //find the index of the current shape in the rotations array\n    let index = tempTetro.rotations.findIndex(item =>this.arrayIsEqual(item,tempTetro.shape));\n    //if the shape is the last one in the array, go back to the first one\n    index = (index + 1 >= tempTetro.rotations.length) ? 0 : index + 1\n    //check if rotate is legal and change shape to new shape\n    tempTetro.newShape = tempTetro.rotations[index];\n    if(this.checkMove(tempTetro, 'rotate')){\n      tempTetro.shape = tempTetro.rotations[index];\n      this.props.updateTetro(tempTetro);\n    }\n  }\n  checkMove = (tempTetro, direction) => {\n    /*This function will determine if the piece can move/rotate\n      Simply by altering between newTopLeft/shape and newShape/topLeft, we can check\n      both rotate AND moves without having to write the same double for loop twice\n      with the exact same code other than the 2 variable pairs listed above*/\n    let checkArray, checkTopLeft, movePiece, placePiece;\n    movePiece = true;\n    placePiece = false;\n    //if the move is a rotate, check the new shape starting at topLeft for boundaries\n    if(direction === 'rotate'){\n      checkArray = tempTetro.newShape\n      checkTopLeft = tempTetro.topLeft\n    }\n    else if(direction === 'spawn'){\n      checkArray = tempTetro.shape;\n      checkTopLeft = tempTetro.topLeft;\n    }\n    //if it is a directional move, check new top Left with the current shape for boundaries\n    else{\n      checkArray = tempTetro.shape\n      checkTopLeft = tempTetro.newTopLeft\n    }\n    //loop through 2d array of shape or newShape\n    for(let row = 0; row < checkArray.length; row++){\n      for(let col = 0; col < checkArray[row].length; col++){\n        if(checkArray[row][col]!== 0){\n          //keep it in bounds horizontally\n          if(checkTopLeft.col + col > 9 || checkTopLeft.col + col < 0){\n            movePiece = false;\n            break;\n          }\n          //keep it in bounds vertically\n          else if(checkTopLeft.row + row > 15){\n            movePiece = false;\n            //the piece has hit the bottom of the board, and now must be added to the board array\n            placePiece = true;\n\n          }\n          //keep the piece from moving through other pieces\n          else if(this.props.board[row+checkTopLeft.row][col+checkTopLeft.col] !== 0) {\n            //if the collision is due to moving right or left, don't move, but don't add to board either\n            if(direction === 'right' || direction === 'left'){\n              movePiece = false;\n              break;\n            }\n            //if the collision is due to moving down, now the piece must be added to the board\n            else{\n              movePiece = false;\n              placePiece = true;\n              break;\n            }\n          }\n        }\n      }\n    }\n    if(direction === 'rotate' || direction === 'spawn'){\n      return movePiece\n    }\n    else{\n      return {movePiece, placePiece}\n    }\n  }\n  moveTetro = direction => {\n    //create a clone of current tetro so we can mutate it.\n    let tempTetro = {...this.props.currentTetro};\n\n    //set a newTopLeft according to the direction the tetro should move\n    switch(direction){\n      case 'left':\n        tempTetro.newTopLeft = {row: tempTetro.topLeft.row, col: tempTetro.topLeft.col - 1}\n        break;\n      case 'right':\n        tempTetro.newTopLeft = {row: tempTetro.topLeft.row, col: tempTetro.topLeft.col + 1}\n        break;\n      case 'down':\n        tempTetro.newTopLeft = {row: tempTetro.topLeft.row + 1, col: tempTetro.topLeft.col}\n        break;\n      case 'up':\n        tempTetro.newTopLeft = {row: tempTetro.topLeft.row - 1, col: tempTetro.topLeft.col}\n        break;\n      default:\n        break;\n    }\n    const allowMove = this.checkMove(tempTetro, direction);\n    if(allowMove.movePiece){\n      tempTetro.topLeft = tempTetro.newTopLeft;\n      this.props.updateTetro(tempTetro)\n    }\n    else if (allowMove.placePiece){\n      this.addTetroToBoard(tempTetro);\n    }\n  }\n  onKeyDown = (e) => {\n    e.preventDefault();\n    if(this.props.gameOn)\n      switch(e.keyCode){\n        case 37:\n          this.moveTetro(\"left\")\n          break;\n        case 39:\n          this.moveTetro('right');\n          break;\n        case 40:\n          this.moveTetro('down')\n          break;\n        case 38:\n          //rotate the piece\n          this.rotate();\n          break;\n        default:\n          //do nothing\n      }\n  }\n  startGame = () =>{\n    if(this.props.gameOver){\n      this.newGame()\n    }\n    else if(this.props.gameStarted){\n      this.props.changeGameStatus(!this.props.gameOn)\n    }\n    else{\n      this.props.startGame(!this.props.gameStarted);\n      this.props.changeGameStatus(!this.props.gameOn);\n      this.gameDiv.focus();\n      this.props.newTetro();\n    }\n  }\n  newGame = () => {\n    //reset everything back to the start\n    this.props.resetGame();\n  }\n  render() {\n    //console.log(this.props.currentTetro.shape)\n    return (\n      <div className = 'app'>\n        <div ref = {(gameDiv) => this.gameDiv = gameDiv} className=\"canvas\" onKeyDown = {this.onKeyDown} tabIndex = \"1\">\n\n          <Canvas />\n\n            \n        </div>\n      </div>\n    );\n  }\n}\nconst mapDispatchToProps = dispatch =>({\n  updateTetro: (tetro)=> dispatch(updateTetro(tetro)),\n  updateBoard: (board)=> dispatch(updateBoard(board)),\n  newTetro: () => dispatch(newTetro()),\n  updateScore: (score) => dispatch(updateScore(score)),\n  changeGameStatus: (status) => dispatch(changeGameStatus(status)),\n  startGame: (started)=> dispatch(startGame(started)),\n  changeGameOver: (gameOver) => dispatch(changeGameOver(gameOver)),\n  resetGame: () => dispatch(resetGame()),\n})\nconst mapStateToProps = state => ({\n  board: state.board,\n  currentTetro: state.currentTetro,\n  score: state.score,\n  gameOn: state.gameOn,\n  gameStarted: state.gameStarted,\n  gameOver: state.gameOver,\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","\r\n\r\nexport const newTetro = () => ({\r\n  type: 'SPAWN_TETRO',\r\n})\r\n\r\nexport const updateTetro = tetro =>({\r\n  type: 'UPDATE_TETRO',\r\n  tetro: tetro\r\n})\r\n\r\nexport const updateBoard = board =>({\r\n  type: 'UPDATE_BOARD',\r\n  payload: board\r\n})\r\n\r\nexport const updateScore = score => ({\r\n  type: 'UPDATE_SCORE',\r\n  payload: score\r\n})\r\n\r\nexport const changeGameStatus = status => ({\r\n  type: 'SWITCH_GAME_ON',\r\n  payload: status\r\n})\r\n\r\nexport const startGame = started =>({\r\n  type: 'START_GAME',\r\n  payload: started\r\n})\r\n\r\nexport const changeGameOver = gameOver => ({\r\n  type: 'SWITCH_GAME_OVER',\r\n  payload: gameOver\r\n})\r\n\r\nexport const resetGame = () => ({\r\n  type: 'RESET_GAME'\r\n})\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nconst boardArray = [\r\n  [0,0,0,0,0,0,0,0,0,0],\r\n  [0,0,0,0,0,0,0,0,0,0],\r\n  [0,0,0,0,0,0,0,0,0,0],\r\n  [0,0,0,0,0,0,0,0,0,0],\r\n  [0,0,0,0,0,0,0,0,0,0],\r\n  [0,0,0,0,0,0,0,0,0,0],\r\n  [0,0,0,0,0,0,0,0,0,0],\r\n  [0,0,0,0,0,0,0,0,0,0],\r\n  [0,0,0,0,0,0,0,0,0,0],\r\n  [0,0,0,0,0,0,0,0,0,0],\r\n  [0,0,0,0,0,0,0,0,0,0],\r\n  [0,0,0,0,0,0,0,0,0,0],\r\n  [0,0,0,0,0,0,0,0,0,0],\r\n  [0,0,0,0,0,0,0,0,0,0],\r\n  [0,0,0,0,0,0,0,0,0,0],\r\n  [0,0,0,0,0,0,0,0,0,0]\r\n]\r\n\r\n\r\nexport const board = (state = Array.from(boardArray), action) => {\r\n  switch(action.type){\r\n    case 'UPDATE_BOARD':\r\n      return action.payload;\r\n    case 'RESET_GAME':\r\n      return [\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0],\r\n        [0,0,0,0,0,0,0,0,0,0]\r\n      ];\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","const tetroArray = [\r\n  {\r\n    name:'O',\r\n    shape: [[1,1],\r\n            [1,1]],\r\n    rotations:[\r\n      [\r\n        [1,1],\r\n        [1,1]\r\n      ],\r\n    ],\r\n    topLeft: {row:0, col: 4}\r\n  },\r\n  {\r\n    name:'I',\r\n    shape: [[2],[2],[2],[2]],\r\n    rotations:[\r\n      [\r\n        [2],[2],[2],[2]\r\n      ]\r\n      ,[\r\n        [2,2,2,2]\r\n      ]\r\n    ],\r\n    topLeft: {row:0, col: 4}},\r\n  {\r\n    name:'Z',\r\n    shape: [[3,3,0],\r\n            [0,3,3]],\r\n    rotations:[\r\n      [\r\n        [3,3,0],\r\n        [0,3,3]\r\n      ],\r\n      [\r\n        [0,3],\r\n        [3,3],\r\n        [3,0]\r\n      ],\r\n    ],\r\n    topLeft: {row:0, col: 4}\r\n  },\r\n  {\r\n    name:'S',\r\n    shape: [[0,4,4],\r\n            [4,4,0]],\r\n    rotations:[\r\n      [\r\n        [0,4,4],\r\n        [4,4,0]\r\n      ],\r\n      [\r\n        [4,0],\r\n        [4,4],\r\n        [0,4]\r\n      ]\r\n    ],\r\n    topLeft: {row:0, col: 4}\r\n  },\r\n  {\r\n    name:'T',\r\n    shape: [[5,5,5],\r\n            [0,5,0]],\r\n    rotations:[\r\n      [\r\n        [5,5,5],\r\n        [0,5,0]\r\n      ],\r\n      [\r\n        [0,5],\r\n        [5,5],\r\n        [0,5]\r\n      ],\r\n      [\r\n        [0,5,0],\r\n        [5,5,5]\r\n      ],\r\n      [\r\n        [5,0],\r\n        [5,5],\r\n        [5,0]\r\n      ],\r\n    ],\r\n    topLeft: {row:0, col: 4}\r\n  },\r\n  {\r\n    name:'L',\r\n    shape: [[0,6,0],\r\n            [0,6,0],\r\n            [0,6,6]],\r\n    rotations: [\r\n      [\r\n        [0,6,0],\r\n        [0,6,0],\r\n        [0,6,6]\r\n      ],\r\n      [\r\n        [6,6,6],\r\n        [6,0,0]\r\n      ],\r\n      [\r\n        [6,6],\r\n        [0,6],\r\n        [0,6]\r\n      ],\r\n      [\r\n        [0,0,6],\r\n        [6,6,6]\r\n      ],\r\n    ],\r\n    topLeft: {row:0, col: 3}\r\n  },\r\n  {\r\n    name:'J',\r\n    shape: [[0,7,0],\r\n            [0,7,0],\r\n            [7,7,0]],\r\n    rotations: [\r\n      [\r\n        [0,7,0],\r\n        [0,7,0],\r\n        [7,7,0]\r\n      ],\r\n      [\r\n        [7,0,0],\r\n        [7,7,7]\r\n      ],\r\n      [\r\n        [7,7],\r\n        [7,0],\r\n        [7,0]\r\n      ],\r\n      [\r\n        [7,7,7],\r\n        [0,0,7]\r\n      ],\r\n    ],\r\n    topLeft: {row:0, col: 4}\r\n  }\r\n]\r\n\r\nexport default tetroArray;\r\n","import { combineReducers } from 'redux';\r\nimport { board } from './board.js';\r\nimport { currentTetro } from './currentTetro.js'\r\nimport { score } from './score.js'\r\nimport { gameOn } from './gameStatus.js'\r\nimport {gameStarted} from './gameStarted.js'\r\nimport { gameOver } from './gameOver.js';\r\n\r\nconst rootReducer = combineReducers({\r\n  board,\r\n  currentTetro,\r\n  score,\r\n  gameOn,\r\n  gameStarted,\r\n  gameOver\r\n});\r\n\r\nexport default rootReducer\r\n","import tetroArray from '../shapes.js'\r\n\r\nexport const currentTetro = (state = [], action)=>{\r\n  switch(action.type){\r\n    case 'UPDATE_TETRO':\r\n      return action.tetro;\r\n    case 'SPAWN_TETRO':\r\n      return tetroArray[Math.floor(Math.random()*tetroArray.length)];\r\n    case 'RESET_GAME':\r\n      return tetroArray[Math.floor(Math.random()*tetroArray.length)];\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const score = (state = 0, action) => {\r\n  switch(action.type){\r\n    case 'UPDATE_SCORE':\r\n      return action.payload;\r\n    case 'RESET_GAME':\r\n      return 0;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const gameOn = (state = false, action) => {\r\n  switch(action.type){\r\n    case 'SWITCH_GAME_ON':\r\n      return action.payload;\r\n    case 'RESET_GAME':\r\n      return true;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const gameStarted = (state = false, action) =>{\r\n  switch(action.type){\r\n    case 'START_GAME':\r\n      return action.payload;\r\n    case 'RESET_GAME':\r\n      return true;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const gameOver = (state = false, action) =>{\r\n  switch(action.type){\r\n    case 'SWITCH_GAME_OVER':\r\n      return action.payload;\r\n    case 'RESET_GAME':\r\n      return false;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/index.js'\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  undefined,\r\n  compose(applyMiddleware(thunk), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()));\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './store.js'\n\nReactDOM.render(<Provider store = {store}><App /></Provider> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}